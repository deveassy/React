3/12 강의노트

  ***** React 홈페이지에서 문서 - 주요개념 정독해보기 (아는만큼 보이겠지) *****

1. 어제자 복습내용
  - push : 원본의 데이터를 변경
  - concat : 원본을 바꾸지 않고 새로운 복제본을 만들어서 데이터를 변경하여 저장함
	->그 복제본을 setState값으로 줌
2. create
  - shouldConponentUpdate
	► 컴포넌트에 아무런 변경사항이 없음에도 계속해서 render함수가 실행되는 것은 
	  프로그램상 비효율적. 
	  -> 비효율적인 실행의 유무를 결정할 수 있기 위한 함수
	► ❶ render함수 이전에 실행된다.
	  ❷ return되는 값을 무조건 true로 설정하면 render함수가 호출되고
	     false로 설정하면 render함수가 호출되지 않음
	  ❸ 새로 변경된 값(배열)과 원본 값(배열)에 접근할 수 있다.
 	► 예제에서 if(this.props.data === newProps) {
	 	 return false;    // 두가지가 같을 경우에는 변경된 값이 없으므로 
					render함수가 실행되지 않게 함
		} return true;   // 두가지가 다를 경우엔 변경(입력)된 값이 있는 것이므로
					render함수가 실행되어 새로운 항목이 형성됨
	========> 이는 concat으로 입력했을 때 가능
		   만약 push로 입력한다면 
	리액트의 기본 동작은 애플리케이션을 구성하고 있는 컴포넌트에서 발생하는 모든 변경사항에 대해서 다시 렌더링 하는 것이고 대부분의 경우 이 이러한 기본 동작에 맡겨도 정상적으로 동작합니다. 하지만 불필요한 re-render는 컴포넌트의 라이프 사이클 압장에서 봤을 때, Best practice일 수 없습니다.

각각의 컴포넌트들은 shouldComponentUpdate라는 메소드를 가지고 있고 이것은 state가 변경되거나 부모 컴포넌트로부터 새로운 props를 전달받을 때 실행됩니다. React는 이 메소드(shouldComponentUpdate)의 반환 값에 따라서 re-render를 할지에 대한 여부를 결정하게 됩니다.

  - immutable
  - push를 사용하여 데이터 추가를 할 경우
     ► 배열 : 예제) var a = [1,2];
		  var b = Array.from(a);
		  b.push(3);
		  console.log(a,b,a===b);
			결과값 -> [1,2] | [1,2,3] | false
	===> Array.from을 통해 새로운 배열을 생성하여 데이터 추가
		3을 추가하기 전에도 배열의 내용은 같지만 결과값은 false가 나옴
     ► 객체 : 예제) var a = {name:eassy};
		  var b = Object.assign({}, a);
		  b.name = 'grace';
		  console.log(a,b,a===b);
			결과값 -> {name: "eassy"} | {name:"grace"} | false

3. update
  - form : https://ko.reactjs.org/docs/forms.html 참고
	자식컴포넌트에서도 state를 지정할 수 있다...
  - value값에 props을 지정해버리니까 read only인 props때문에 react내에서 개입하여서 
	다른 조작을 하지 못하게 막음
	-> 컴퍼넌트 안에서 value값을 state화를 시켜줌
	-> input의 값을 바꿀 때 state값을 바꿔주어야 props가 