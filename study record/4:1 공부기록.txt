4/1 공부기록

1.JSON(JavaScript Object Notation)
   좀 더 쉽게 데이터를 교환하고 저장하기 위하여 만들어진 텍스트 기반의 데이터 교환 표준
    자바스크립트를 기반으로 만들어졌습니다.
    특징 : 1. JSON은 자바스크립트를 확장하여 만들어졌습니다.
	  2. JSON은 자바스크립트 객체 표기법을 따릅니다.
	  3. JSON은 사람과 기계가 모두 읽기 편하도록 고안되었습니다.
 	  4. JSON은 프로그래밍 언어와 운영체제에 독립적입니다.

2. React Router Dom
Single Page Application (싱글 페이지 어플리케이션) 의 약자입니다. 말 그대로, 페이지가 1개인 어플리케이션이란 뜻입니다. 전통적인 웹어플리케이션의 구조는, 여러 페이지로 구성되어있습니다. 유저가 요청 할 때 마다 페이지가 새로고침되며, 페이지를 로딩 할 때 마다 서버로부터 리소스를 전달받아 해석 후 렌더링을 합니다. HTML 파일, 혹은 템플릿 엔진 등을 사용해서 어플리케이션의 뷰가 어떻게 보여질지도 서버에서 담당했죠.

요즘은 웹에서 제공되는 정보가 정말 많기 때문에 속도적인 측면에서 문제가 있었고, 이를 해소하기 위하여 캐싱과 압축을 하여 서비스가 제공되는데요. 이는 사용자와 인터랙션이 많은 모던 웹 어플리케이션에서는 충분하지 않을 수도 있습니다. 렌더링하는것을 서버쪽에서 담당한다는것은, 그 만큼 렌더링을 위한 서버 자원이 사용되는것이고, 불필요한 트래픽도 낭비되기 때문이지요.

-->> 문제점 :1. 특정 페이지에 대한 즐겨찾기 등록이 불가합니다. 컴포넌트가 전환되더라도 브라우저 주소창의 URL은 고정되어 있기 때문입니다.
	   2. 뒤로 가기 버튼을 누르면 해당 앱내에서 이전 페이지로 이동하는 것이 아니라 그 전에 서핑하던 다른 웹사이트로 이동해버립니다.
	   3. 새로 고침 버튼을 누르면 사용 중이던 컴포넌트가 아닌 무조건 최초에 렌더링되었던 Home 컴포넌트로 이동합니다.

그래서 우리는 리액트 같은 라이브러리 혹은 프레임워크를 사용해서 뷰 렌더링을 유저의 브라우저가 담당하도록 하고, 우선 어플리케이션을 브라우저에 로드 한 다음에 정말 필요한 데이터만 전달받아 보여주지요.

싱글페이지라고 해서, 한 종류의 화면만 있냐구요? 그건 아닙니다. 예를들어 블로그를 만든다면, 홈, 포스트 목록, 포스트, 글쓰기 등의 화면이 있겠지요. 또한 이 화면에 따라 주소도 만들어줘야 합니다. 주소가 있어야, 유저들이 북마크도 할 수 있고 서비스에 구글을 통해 유입될 수 있기 때문이죠. 다른 주소에 따라 다른 뷰를 보여주는것을 라우팅 이라고 하는데요, 리액트 자체에는 이 기능이 내장되어있지 않습니다. 따라서 우리가 직접 브라우저의 API 를 사용하고 상태를 설정하여 다른 뷰를 보여주어야 합니다.


routing(router) : 사용자가 어떤 주소로 들어갔을 때, 그 주소에 해당하는 적당한 페이지를 사용자에게 보여주는 것


  - BrowserRouter : 
	react-router-dom을 적용하고 싶은 컴포넌트의 최상위 컴포넌트를 감싸주는 wrapper Component. --> <BrowserRouter><App /></BrowserRouter>
		---> App component에서 BrowserRouter를 사용할 수 있게됨
		---> 웹서버 설정을 바꿔서 어떤 경로로 들어오든지, root페이지에 있는 html파일을 서비스 할 수 있을 경우 사용


  - path: route에 각 컴포넌트마다 적용될 url에 관련된 페이지명을 지정해주는 것
	route를 설정 할 때에는 Route 컴포넌트를 사용하고, 경로는 path 값으로 설정합니다.
첫번째 라우트 / 의 경우에는 Home 컴포넌트를 보여주게 했고, 두번째 라우트 /about 에서는 About 컴포넌트를 보여주게 했습니다.
첫번째 라우트의 경우엔 exact 가 붙어있지요? 이게 붙어있으면 주어진 경로와 정확히 맞아 떨어져야만 설정한 컴포넌트를 보여줍니다.  exact 를 하지 않으면, /about 에도 / 가 있기 때문에, 매칭이 되어서 보여지는거랍니다. =====> 동적라우팅


  - switch : switch로 route를 감싸게 되면, exact가 지정되있지 않을 경우, path의 값과 일치하는 첫번째 컴포넌트가 발견되면 나머지 컴포넌트는 무시됨. ( exact를 쓰지 않고 같은 결과를 낼 수 있음 )


  - Link : 페이지 리로딩을 자동으로 해주는 것 ---> a태그 대신에 Link사용, href대신에 to사용
  =====> 페이지가 바뀌지 않고 데이터들이 변경됨


  - HashRouter : url뒤에 #가 붙음


  - NavLink : 만약에 설정한 URL 이 활성화가 되면, 특정 스타일 혹은 클래스를 지정 가능 
		(class = "active"가 생김)
	--> Route 를 지정 할 때 처럼, 중첩될수도 있는 라우트들은 exact 로 설정해 주어야 함